gunit bashast_arith;

//for this set of unittests, we'll start from the
//top of the order of ops

primary:
"3" -> (PRIMARY 3)

post_inc_dec:
"b--" -> (POST_INC_DEC b --)
"i++" -> (POST_INC_DEC i ++)

pre_inc_dec:
"++i" -> (PRE_INC_DEC ++ i)
"--b" -> (PRE_INC_DEC -- b)

unary:
"6" -> (UNARY (PRIMARY 6))
"+9" -> (UNARY + (PRIMARY 9))
"-15" -> (UNARY - (PRIMARY 15))
"++ z" -> (UNARY (PRE_INC_DEC ++ z))
" f--" -> (UNARY (POST_INC_DEC f --))

negation:
"8" -> (NEGATION (UNARY (PRIMARY 8)))

exp:
"8" -> (EXPONENT (NEGATION (UNARY (PRIMARY 8))))
"6**2" -> (EXPONENT (NEGATION (UNARY (PRIMARY 6))) ** (NEGATION (UNARY (PRIMARY 2))))
"-5**+4" -> (EXPONENT (NEGATION (UNARY - (PRIMARY 5))) ** (NEGATION (UNARY + (PRIMARY 4))))

tdm:
"9" -> (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 9)))))
"7 * 9" -> (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 7)))) * (EXPONENT (NEGATION (UNARY (PRIMARY 9)))))
"7 / 9" -> (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 7)))) / (EXPONENT (NEGATION (UNARY (PRIMARY 9)))))
"7 % 9" -> (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 7)))) % (EXPONENT (NEGATION (UNARY (PRIMARY 9)))))
"6*4*3" -> (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 6)))) * (EXPONENT (NEGATION (UNARY (PRIMARY 4)))) * (EXPONENT (NEGATION (UNARY (PRIMARY 3)))))
"6*4/3" -> (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 6)))) * (EXPONENT (NEGATION (UNARY (PRIMARY 4)))) / (EXPONENT (NEGATION (UNARY (PRIMARY 3)))))
"6%4*3" -> (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 6)))) % (EXPONENT (NEGATION (UNARY (PRIMARY 4)))) * (EXPONENT (NEGATION (UNARY (PRIMARY 3)))))
"7/3**6" -> (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 7)))) / (EXPONENT (NEGATION (UNARY (PRIMARY 3))) ** (NEGATION (UNARY (PRIMARY 6)))))
"7/-3**6" -> (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 7)))) / (EXPONENT (NEGATION (UNARY - (PRIMARY 3))) ** (NEGATION (UNARY (PRIMARY 6)))))

addsub:
"10" -> (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 10))))))
"9+27" -> (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 9))))) + (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 27))))))
"9-27" -> (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 9))))) - (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 27))))))
"9-27+8" -> (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 9))))) - (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 27))))) + (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 8))))))
"9-35*-2" -> (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 9))))) - (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 35)))) * (EXPONENT (NEGATION (UNARY - (PRIMARY 2))))))
"9*5+2" -> (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 9)))) * (EXPONENT (NEGATION (UNARY (PRIMARY 5))))) + (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 2))))))

shifts:
"16" -> (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 16)))))))
"16+2>>3" -> (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 16))))) + (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 2)))))) >> (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 3)))))))
"16+2<<3" -> (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 16))))) + (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 2)))))) << (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 3)))))))

compare:
"17" -> (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17))))))))
"19<20" -> (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 19))))))) < (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 20))))))))

bitand:
"17" -> (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17)))))))))
"17 & 15" -> (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17)))))))) & (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 15)))))))))

bitxor:
"17" -> (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17))))))))))
"17 ^ 15" -> (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17))))))))) ^ (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 15))))))))))

bitor:
"17" -> (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17)))))))))))
"17 | 15" -> (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17)))))))))) | (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 15)))))))))))


logicand:
"17" -> (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17))))))))))))
"17 && 15" -> (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17))))))))))) && (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 15))))))))))))

logicor:
"17" -> (LOGIC_OR (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17)))))))))))))
"17 || 15" -> (LOGIC_OR (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 17)))))))))))) || (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (EXPONENT (NEGATION (UNARY (PRIMARY 15)))))))))))))

