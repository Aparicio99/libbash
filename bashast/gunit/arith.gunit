/**
Copyright 2010 Nathan Eloe

This file is part of libbash.

libbash is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

libbash is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with libbash.  If not, see <http://www.gnu.org/licenses/>.
**/
gunit bashast_arith;

//for this set of unittests, we'll start from the
//top of the order of ops

primary:
"3" -> (PRIMARY 3)

post_inc_dec:
"b--" -> (POST_INC_DEC b --)
"i++" -> (POST_INC_DEC i ++)

pre_inc_dec:
"++i" -> (PRE_INC_DEC ++ i)
"--b" -> (PRE_INC_DEC -- b)

unary:
"6" -> (UNARY (PRIMARY 6))
"+9" -> (UNARY + (PRIMARY 9))
"-15" -> (UNARY - (PRIMARY 15))
"++ z" -> (UNARY (PRE_INC_DEC ++ z))
" f--" -> (UNARY (POST_INC_DEC f --))

negation:
"8" -> (UNARY (PRIMARY 8))

exp:
"8" -> (UNARY (PRIMARY 8))
"6**2" -> (** (UNARY (PRIMARY 6)) (UNARY (PRIMARY 2)))
"-5**+4" -> (** (UNARY - (PRIMARY 5)) (UNARY + (PRIMARY 4)))

tdm:
"9" -> (TIMES_DIV_MOD (UNARY (PRIMARY 9)))
"7 * 9" -> (TIMES_DIV_MOD (UNARY (PRIMARY 7)) * (UNARY (PRIMARY 9)))
"7 / 9" -> (TIMES_DIV_MOD (UNARY (PRIMARY 7)) / (UNARY (PRIMARY 9)))
"7 % 9" -> (TIMES_DIV_MOD (UNARY (PRIMARY 7)) % (UNARY (PRIMARY 9)))
"6*4*3" -> (TIMES_DIV_MOD (UNARY (PRIMARY 6)) * (UNARY (PRIMARY 4)) * (UNARY (PRIMARY 3)))
"6*4/3" -> (TIMES_DIV_MOD (UNARY (PRIMARY 6)) * (UNARY (PRIMARY 4)) / (UNARY (PRIMARY 3)))
"6%4*3" -> (TIMES_DIV_MOD (UNARY (PRIMARY 6)) % (UNARY (PRIMARY 4)) * (UNARY (PRIMARY 3)))
"7/3**6" -> (TIMES_DIV_MOD (UNARY (PRIMARY 7)) / (** (UNARY (PRIMARY 3)) (UNARY (PRIMARY 6))))
"7/-3**6" -> (TIMES_DIV_MOD (UNARY (PRIMARY 7)) / (** (UNARY - (PRIMARY 3)) (UNARY (PRIMARY 6))))

addsub:
"10" -> (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 10))))
"9+27" -> (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 9))) + (TIMES_DIV_MOD (UNARY (PRIMARY 27))))
"9-27" -> (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 9))) - (TIMES_DIV_MOD (UNARY (PRIMARY 27))))
"9-27+8" -> (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 9))) - (TIMES_DIV_MOD (UNARY (PRIMARY 27))) + (TIMES_DIV_MOD (UNARY (PRIMARY 8))))
"9-35*-2" -> (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 9))) - (TIMES_DIV_MOD (UNARY (PRIMARY 35)) * (UNARY - (PRIMARY 2))))
"9*5+2" -> (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 9)) * (UNARY (PRIMARY 5))) + (TIMES_DIV_MOD (UNARY (PRIMARY 2))))

shifts:
"16" -> (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 16)))))
"16+2>>3" -> (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 16))) + (TIMES_DIV_MOD (UNARY (PRIMARY 2)))) >> (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 3)))))
"16+2<<3" -> (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 16))) + (TIMES_DIV_MOD (UNARY (PRIMARY 2)))) << (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 3)))))

compare:
"17" -> (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17))))))
"19<20" -> (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 19))))) < (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 20))))))

bitand:
"17" -> (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17)))))))
"17 & 15" -> (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17)))))) & (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 15)))))))

bitxor:
"17" -> (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17))))))))
"17 ^ 15" -> (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17))))))) ^ (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 15))))))))

bitor:
"17" -> (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17)))))))))
"17 | 15" -> (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17)))))))) | (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 15)))))))))


logicand:
"17" -> (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17))))))))))
"17 && 15" -> (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17))))))))) && (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 15))))))))))

logicor:
"17" -> (LOGIC_OR (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17)))))))))))
"17 || 15" -> (LOGIC_OR (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 17)))))))))) || (LOGIC_AND (BITWISE_OR (BITWISE_XOR (BITWISE_AND (COMPARE (BITSHIFT (ADD_SUB (TIMES_DIV_MOD (UNARY (PRIMARY 15)))))))))))

