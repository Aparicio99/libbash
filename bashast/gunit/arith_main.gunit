/*
   Please use git log for copyright holder and year information

   This file is part of libbash.

   libbash is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 2 of the License, or
   (at your option) any later version.

   libbash is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with libbash.  If not, see <http://www.gnu.org/licenses/>.
*/
gunit java_libbash;

//for this set of unittests, we'll start from the
//top of the order of ops

primary:
"3" -> "3"
"foo" -> (VAR_REF foo)
"foo[1]" -> (VAR_REF (foo 1))

post_inc_dec:
"b--" -> (POST_DECR (VAR_REF b))
"i++" -> (POST_INCR (VAR_REF i))

pre_inc_dec:
"++i" -> (PRE_INCR (VAR_REF i))
"--b" -> (PRE_DECR (VAR_REF b))

unary:
"6" -> "6"
"+9" -> (PLUS_SIGN 9)
"-15" -> (MINUS_SIGN 15)
"++ z" -> (PRE_INCR (VAR_REF z))
"f--" -> (POST_DECR (VAR_REF f))
"~8" -> (~ 8)
"!8" -> (! 8)
"!!8" -> (! (! 8))
"--8" -> (PRE_DECR 8)
"+++${a}" -> (PLUS_SIGN (PRE_INCR (VAR_REF (VAR_REF a))))
"++++${a}" -> (PLUS_SIGN (PLUS_SIGN (PRE_INCR (VAR_REF (VAR_REF a)))))
"+-++${a}" -> (PLUS_SIGN (MINUS_SIGN (PRE_INCR (VAR_REF (VAR_REF a)))))

exponential:
"8" -> "8"
"6**2" -> (** 6 2)
"-5**+4" -> (** (MINUS_SIGN 5) (PLUS_SIGN 4))

times_division_modulus:
"9" -> "9"
"7 * 9" -> (* 7 9)
"7 / 9" -> (/ 7 9)
"7 % 9" -> (% 7 9)
"6*4*3" -> (* (* 6 4) 3)
"6*4/3" -> (/ (* 6 4) 3)
"6%4*3" -> (* (% 6 4) 3)
"7/3**6" -> (/ 7 (** 3 6))
"7/-3**6" -> (/ 7 (** (MINUS_SIGN 3) 6))

addsub:
"10" -> "10"
"9+27" -> (+ 9 27)
"9-27" -> (- 9 27)
"9-27+8" -> (+ (- 9 27) 8)
"9-35*-2" -> (- 9 (* 35 (MINUS_SIGN 2)))
"9*5+2" -> (+ (* 9 5) 2)

shifts:
"16" -> "16"
"16+2>>3" -> (>> (+ 16 2) 3)
"16+2<<3" -> (<< (+ 16 2) 3)

compare:
"17" ->"17"
"19<20" -> (< 19 20)
"19!=20" -> (NOT_EQUALS 19 20)

bitwiseand:
"17" -> "17"
"17 & 15" -> (& 17 15)

bitwisexor:
"17" -> "17"
"17 ^ 15" -> (^ 17 15)

bitwiseor:
"17" -> "17"
"17 | 15" -> (| 17 15)

logicand:
"17" -> "17"
"17 && 15" -> (&& 17 15)

logicor:
"17" -> "17"
"17 || 15" -> (|| 17 15)

arithmetic_assignment:
"13"->"13"
"foo=5+3" -> (= foo (+ 5 3))
"foo[5]=5+3" -> (= (foo 5) (+ 5 3))
"${foo[5]}=3" -> (= (VAR_REF (VAR_REF (foo 5))) 3)
"${foo[5]}*=3" -> (*= (VAR_REF (VAR_REF (foo 5))) 3)
"${foo[5]}^=3" -> (^= (VAR_REF (VAR_REF (foo 5))) 3)
"var *= 5" -> (*= var 5)
"var /= 5" -> (/= var 5)
"var %= 5" -> (%= var 5)
"asdf += 5" -> (+= asdf 5)
"var -= 5" -> (-= var 5)
"var <<= 5" -> (<<= var 5)
"var >>= 5" -> (>>= var 5)
"var &= 5" -> (&= var 5)
"var ^= 5" -> (^= var 5)
"var |= 5" -> (|= var 5)
"3=7" FAIL

arithmetic_condition:
"5?7:2"->(ARITHMETIC_CONDITION 5 7 2)
"(4-3)?0:1"->(ARITHMETIC_CONDITION (- 4 3) 0 1)

arithmetics:
"~   10" -> (~ 10)

arithmetic_expansion:
"$((5+4, 3+2, a*b))" -> (ARITHMETIC_EXPRESSION (+ 5 4) (+ 3 2) (* (VAR_REF a) (VAR_REF b)))
"$[1]" -> (ARITHMETIC_EXPRESSION 1)

start:
"echo $(( 3 + 2 ))" -> (LIST (COMMAND (STRING echo) (STRING (ARITHMETIC_EXPRESSION (+ 3 2)))))
"echo $((++i))" -> (LIST (COMMAND (STRING echo) (STRING (ARITHMETIC_EXPRESSION (PRE_INCR (VAR_REF i))))))
"echo $(( ++i ))" -> (LIST (COMMAND (STRING echo) (STRING (ARITHMETIC_EXPRESSION (PRE_INCR (VAR_REF i))))))
"echo \"The solution is: $(( 3+2 ))\""-> (LIST (COMMAND (STRING echo) (STRING (DOUBLE_QUOTED_STRING The   solution   is :   (ARITHMETIC_EXPRESSION (+ 3 2))))))
