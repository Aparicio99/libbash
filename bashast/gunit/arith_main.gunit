/*
   Please use git log for copyright holder and year information

   This file is part of libbash.

   libbash is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 2 of the License, or
   (at your option) any later version.

   libbash is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with libbash.  If not, see <http://www.gnu.org/licenses/>.
*/
gunit java_libbash;

//for this set of unittests, we'll start from the
//top of the order of ops

arithmetics_test:
//primary:
"3" -> (ARITHMETIC 3)
"foo" -> (ARITHMETIC (VAR_REF foo))
"foo[1]" -> (ARITHMETIC (VAR_REF (foo (ARITHMETIC 1))))

//unary:
"3" -> (ARITHMETIC 3)
"b--" -> (ARITHMETIC (POST_DECR (VAR_REF b)))
"i++" -> (ARITHMETIC (POST_INCR (VAR_REF i)))

//pre_inc_dec:
"++i" -> (ARITHMETIC (PRE_INCR (VAR_REF i)))
"--b" -> (ARITHMETIC (PRE_DECR (VAR_REF b)))

//unary:
"6" -> (ARITHMETIC 6)
"+9" -> (ARITHMETIC (PLUS_SIGN 9))
"-15" -> (ARITHMETIC (MINUS_SIGN 15))
"++ z" -> (ARITHMETIC (PRE_INCR (VAR_REF z)))
"f--" -> (ARITHMETIC (POST_DECR (VAR_REF f)))
"~8" -> (ARITHMETIC (~ 8))
"!8" -> (ARITHMETIC (! 8))
"!!8" -> (ARITHMETIC (! (! 8)))
"--8" -> (ARITHMETIC (PRE_DECR 8))

//exponential:
"8" -> (ARITHMETIC 8)
"6**2" -> (ARITHMETIC (** 6 2))
"-5**+4" -> (ARITHMETIC (** (MINUS_SIGN 5) (PLUS_SIGN 4)))

//times_division_modulus:
"9" -> (ARITHMETIC 9)
"7 * 9" -> (ARITHMETIC (* 7 9))
"7 / 9" -> (ARITHMETIC (/ 7 9))
"7 % 9" -> (ARITHMETIC (% 7 9))
"6*4*3" -> (ARITHMETIC (* (* 6 4) 3))
"6*4/3" -> (ARITHMETIC (/ (* 6 4) 3))
"6%4*3" -> (ARITHMETIC (* (% 6 4) 3))
"7/3**6" -> (ARITHMETIC (/ 7 (** 3 6)))
"7/-3**6" -> (ARITHMETIC (/ 7 (** (MINUS_SIGN 3) 6)))

//addsub:
"10" -> (ARITHMETIC 10)
"9+27" -> (ARITHMETIC (+ 9 27))
"9-27" -> (ARITHMETIC (- 9 27))
"9-27+8" -> (ARITHMETIC (+ (- 9 27) 8))
"9-35*-2" -> (ARITHMETIC (- 9 (* 35 (MINUS_SIGN 2))))
"9*5+2" -> (ARITHMETIC (+ (* 9 5) 2))

//shifts:
"16" -> (ARITHMETIC 16)
"16+2>>3" -> (ARITHMETIC (>> (+ 16 2) 3))
"16+2<<3" -> (ARITHMETIC (<< (+ 16 2) 3))

//compare:
"17" ->(ARITHMETIC 17)
"19<20" -> (ARITHMETIC (< 19 20))
"19!=20" -> (ARITHMETIC (NOT_EQUALS 19 20))
"19==20" -> (ARITHMETIC (EQUALS_TO 19 20))

//bitwiseand:
"17" -> (ARITHMETIC 17)
"17 & 15" -> (ARITHMETIC (& 17 15))

//bitwisexor:
"17" -> (ARITHMETIC 17)
"17 ^ 15" -> (ARITHMETIC (^ 17 15))

//bitwiseor:
"17" -> (ARITHMETIC 17)
"17 | 15" -> (ARITHMETIC (| 17 15))

//logicand:
"17" -> (ARITHMETIC 17)
"17 && 15" -> (ARITHMETIC (&& 17 15))

//logicor:
"17" -> (ARITHMETIC 17)
"17 || 15" -> (ARITHMETIC (|| 17 15))

//arithmetic:
"foo=5+3" -> (ARITHMETIC (= foo (+ 5 3)))
"foo[5]=5+3" -> (ARITHMETIC (= (foo (ARITHMETIC 5)) (+ 5 3)))
"${foo[5]}=3" -> (ARITHMETIC (= (VAR_REF (VAR_REF (foo (ARITHMETIC 5)))) 3))
"${foo[5]}*=3" ->  (ARITHMETIC (MUL_ASSIGN (VAR_REF (VAR_REF (foo (ARITHMETIC 5)))) 3))
"${foo[5]}^=3" -> (ARITHMETIC (XOR_ASSIGN (VAR_REF (VAR_REF (foo (ARITHMETIC 5)))) 3))
"var *= 5" -> (ARITHMETIC (MUL_ASSIGN var 5))
"var /= 5" -> (ARITHMETIC (DIVIDE_ASSIGN var 5))
"var %= 5" -> (ARITHMETIC (MOD_ASSIGN var 5))
"asdf += 5" -> (ARITHMETIC (PLUS_ASSIGN asdf 5))
"var -= 5" -> (ARITHMETIC (MINUS_ASSIGN var 5))
"var <<= 5" -> (ARITHMETIC (LSHIFT_ASSIGN var 5))
"var >>= 5" -> (ARITHMETIC (RSHIFT_ASSIGN var 5))
"var &= 5" -> (ARITHMETIC (AND_ASSIGN var 5))
"var ^= 5" -> (ARITHMETIC (XOR_ASSIGN var 5))
"var |= 5" -> (ARITHMETIC (OR_ASSIGN var 5))
"3=7" FAIL

"13"->(ARITHMETIC 13)
"5?7:2"->(ARITHMETIC (ARITHMETIC_CONDITION 5 7 2))
"(4-3)?0:1"-> (ARITHMETIC (ARITHMETIC_CONDITION (ARITHMETIC (- 4 3)) 0 1))
"(4-3)?(0,2):1"-> (ARITHMETIC (ARITHMETIC_CONDITION (ARITHMETIC (- 4 3)) (ARITHMETIC 0) (ARITHMETIC 2) 1))

//arithmetics:
"~   10" -> (ARITHMETIC (~ 10))

arithmetic_expansion:
"$((5+4, 3+2, a*b))" -> (ARITHMETIC_EXPRESSION (ARITHMETIC (+ 5 4)) (ARITHMETIC (+ 3 2)) (ARITHMETIC (* (VAR_REF a) (VAR_REF b))))
"$[1]" -> (ARITHMETIC_EXPRESSION (ARITHMETIC 1))
"$(($((1))))" -> (ARITHMETIC_EXPRESSION (ARITHMETIC (ARITHMETIC_EXPRESSION (ARITHMETIC 1))))

start:
"echo $(( 3 + 2 ))" -> (LIST (COMMAND (STRING echo) (STRING (ARITHMETIC_EXPRESSION (ARITHMETIC (+ 3 2))))))
"echo $((++i))" -> (LIST (COMMAND (STRING echo) (STRING (ARITHMETIC_EXPRESSION (ARITHMETIC (PRE_INCR (VAR_REF i)))))))
"echo $(( ++i ))" -> (LIST (COMMAND (STRING echo) (STRING (ARITHMETIC_EXPRESSION (ARITHMETIC (PRE_INCR (VAR_REF i)))))))
"echo \"The solution is: $(( 3+2 ))\""-> (LIST (COMMAND (STRING echo) (STRING (DOUBLE_QUOTED_STRING The   solution   is :   (ARITHMETIC_EXPRESSION (ARITHMETIC (+ 3 2)))))))
