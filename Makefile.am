###############################################
#Copyright 2010 Nathan Eloe
#
#This file is part of libbash.
#
#libbash is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 2 of the License, or
#(at your option) any later version.
#
#libbash is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with libbash.  If not, see <http://www.gnu.org/licenses/>.
###############################################
# Makefile.am for libbash
# Author: Nathan Eloe
###############################################
include doxygen.am

ACLOCAL_AMFLAGS = -I m4

TEST_EXTENSIONS= .gunit
GUNIT_LOG_COMPILER = $(srcdir)/bashast/gunit/runtests.sh
AM_GUNIT_LOG_FLAGS = @antlr_cp@:.
GUNIT_TESTS = bashast/gunit/arith_main.gunit \
		bashast/gunit/array.gunit \
		bashast/gunit/assoc_array.gunit \
		bashast/gunit/brace.gunit \
		bashast/gunit/command_sub.gunit \
		bashast/gunit/comment.gunit \
		bashast/gunit/compound.gunit \
		bashast/gunit/cond_main.gunit \
		bashast/gunit/continued_lines.gunit \
		bashast/gunit/expansions.gunit \
		bashast/gunit/fname.gunit \
		bashast/gunit/function.gunit \
		bashast/gunit/list.gunit \
		bashast/gunit/param_main.gunit \
		bashast/gunit/pipeline.gunit \
		bashast/gunit/proc_sub.gunit \
		bashast/gunit/redir.gunit \
		bashast/gunit/simp_command.gunit \
		bashast/gunit/simp_prog.gunit

TESTS = $(GUNIT_TESTS)
# these get cleaned so only add autogenerated stuff or modify CLEANFILES
check_JAVA = bashast/bashastLexer.java bashast/bashastParser.java
AM_JAVACFLAGS = -classpath @antlr_cp@

AM_CXXFLAGS=$(BOOST_CPPFLAGS) -std=c++0x -I$(top_srcdir)/src/
# We use -x c++ to compile all C source files as C++ because there's C++
# code embedded in them.
AM_CFLAGS=-x c++ $(AM_CXXFLAGS)

if HAVE_GTEST
TESTS += builtin_unittests post_check
check_PROGRAMS = builtin_unittests post_check
builtin_unittests_SOURCES = test/run_tests.cpp
builtin_unittests_SOURCES += src/builtins/tests/echo_tests.cpp
builtin_unittests_SOURCES += src/builtins/tests/boolean_tests.cpp
builtin_unittests_LDADD = ${GTEST_LIBS} libcppbash.la

post_check_SOURCES = test/run_tests.cpp
post_check_SOURCES += test/post_check.cpp
post_check_SOURCES += test/walker_test.cpp
post_check_LDADD = ${GTEST_LIBS}\
				   $(BOOST_SYSTEM_LIB)\
				   $(BOOST_FILESYSTEM_LIB)\
				   libcppbash.la
endif

GENERATED_PARSER_C = bashastLexer.c bashastParser.c
GENERATED_PARSER_H = bashastLexer.h bashastParser.h
GENERATED_WALKER_C = bashwalker.c
GENERATED_WALKER_H = bashwalker.h
CLEANFILES = $(GENERATED_PARSER_C) \
			 $(GENERATED_PARSER_H) \
			 $(GENERATED_WALKER_C) \
			 $(GENERATED_WALKER_H) \
			 $(check_JAVA) \
			 bashast.g \
			 bashast.tokens \
			 bashast/bashast.tokens \
			 bashwalker.tokens \
			 bashast/grammar.run \
			 grammar.run \
			 walker.run

lib_LTLIBRARIES = libcppbash.la
libcppbash_la_SOURCES = src/cppbash_builtin.cpp \
						src/cppbash_builtin.h \
						src/builtins/echo_builtin.cpp \
						src/builtins/echo_builtin.h \
						src/builtins/boolean_builtins.h \
						$(GENERATED_PARSER_C) \
						src/core/interpreter.cpp \
						src/core/interpreter.h \
						$(GENERATED_WALKER_C)

EXTRA_DIST = bashast/bashast.g \
			 bashast/bashwalker.g \
			 $(GUNIT_TESTS) \
			 $(GUNIT_LOG_COMPILER)

coding_standard.pdf: coding_standard/coding_standard.tex
	@PDFLATEX@ coding_standard/coding_standard.tex 2&>1 > /dev/null

grammar.run: bashast.g
	@JAVA@ -classpath @antlr_cp@ -Xmx1024m org.antlr.Tool -Xconversiontimeout 20000 -fo . $<
	touch $@

bashast.g: bashast/bashast.g
	sed -e 's/CommonTree/pANTLR3_BASE_TREE/g' -e 's/Java/C/g' $< > $@

walker.run: bashast/bashwalker.g
	@JAVA@ -classpath @antlr_cp@ -Xmx1024m org.antlr.Tool -Xconversiontimeout 20000 bashast.g -fo . $<
	touch $@

$(GENERATED_PARSER_C): grammar.run
$(GENERATED_PARSER_H): grammar.run

# Avoid initializing C++ type to NULL by sed, variables whose name
# starts with libbash_ will be stripped
$(GENERATED_WALKER_C): walker.run
	sed -i -e 's/\(libbash_.*\) = NULL/\1/' $@

$(GENERATED_WALKER_H): walker.run

bashast/grammar.run: bashast/bashast.g
	@JAVA@ -classpath @antlr_cp@ -Xmx1024m org.antlr.Tool -Xconversiontimeout 20000 -fo bashast $<
	touch $@

$(check_JAVA): bashast/grammar.run
